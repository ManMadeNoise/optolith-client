/**
 * This file provides several helper functions for working with `Activatable`s.
 *
 * @file src/Utilities/activatableConvertUtils.ts
 * @author Lukas Obermann
 * @since 1.1.0
 */

import { fmap } from "../../../Data/Functor";
import { append, elemF, empty, imap, List } from "../../../Data/List";
import { alt, guard, isJust, Nothing, or, then } from "../../../Data/Maybe";
import { foldr } from "../../../Data/OrderedMap";
import { Record } from "../../../Data/Record";
import { AdvantageId, DisadvantageId, SpecialAbilityId } from "../../Constants/Ids";
import { ActivatableActivationOptions } from "../../Models/Actions/ActivatableActivationOptions";
import { ActivatableDependent } from "../../Models/ActiveEntries/ActivatableDependent";
import { ActiveObject } from "../../Models/ActiveEntries/ActiveObject";
import { toActiveObjectWithId } from "../../Models/ActiveEntries/ActiveObjectWithId";
import { pipe, pipe_ } from "../pipe";

const ADA = ActivatableDependent.A
const AAOA = ActivatableActivationOptions.A

/**
 * Converts the object generated by the list item to an object that can be
 * inserted into an array of ActiveObjects.
 * @param obj The entry for which you want to convert the object.
 * @param activate The object generated by the list item.
 */
export const convertUIStateToActiveObject =
  (activate: Record<ActivatableActivationOptions>): Record<ActiveObject> =>
    AAOA.id (activate) === AdvantageId.HatredOf
    ? ActiveObject ({
        sid: AAOA.selectOptionId1 (activate),
        sid2: AAOA.input (activate),
        cost: AAOA.customCost (activate),
      })
    : AAOA.id (activate) === DisadvantageId.PersonalityFlaw
    ? ActiveObject ({
        sid: AAOA.selectOptionId1 (activate),
        sid2: or (fmap (elemF (List<number | string> (7, 8)))
                       (AAOA.selectOptionId1 (activate)))
          ? AAOA.input (activate)
          : Nothing,
        cost: AAOA.customCost (activate),
      })
    : AAOA.id (activate) === SpecialAbilityId.SkillSpecialization
    ? ActiveObject ({
        sid: AAOA.selectOptionId1 (activate),
        sid2: alt<number | string> (AAOA.input (activate))
                                   (AAOA.selectOptionId2 (activate)),
        cost: AAOA.customCost (activate),
      })
    : ActiveObject ({
        sid: alt<number | string> (AAOA.input (activate))
                                  (AAOA.selectOptionId1 (activate)),
        sid2: then (guard (isJust (AAOA.input (activate))
                           || isJust (AAOA.selectOptionId1 (activate))))
                   (AAOA.selectOptionId2 (activate)),
        tier: AAOA.level (activate),
        cost: AAOA.customCost (activate),
      })

/**
 * Generates a list of ActiveObjects based on the given instance.
 */
export const convertActivatableToArray =
  (x: Record<ActivatableDependent>) =>
    pipe_ (
            x,
            ADA.active,
            imap (index => toActiveObjectWithId (index) (ADA.id (x)))
          )

/**
 * Get all active items in an array.
 * @param state A state slice.
 */
export const getActiveFromState =
  foldr (pipe (convertActivatableToArray, append)) (empty)

export interface ActiveObjectAny extends ActiveObject {
  [key: string]: any
}
